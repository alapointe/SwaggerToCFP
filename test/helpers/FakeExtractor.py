from lib.openapi3.openapi3 import OpenAPI
import yaml
import src.specification as specification

class FakeExtractor():

    def __init__(self, spec_path):
        self.spec = specification.get_specification(spec_path)

    def get_metadata():
        # TODO Refactor to return api name, desc and url in one method
        pass
        
    def get_api_name(self):
        return "FakeAPIName"

    def get_api_description(self):
        return "FakeDescription"

    def get_api_url(self):
        return "FakeURL"
        
    def get_paths(self):
        return {
            '/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': False, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': False, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors.', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}}}
            }
    
    def get_schema(self):
        return {
            'Order': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}, 'Error': {'type': 'object', 'properties': {'code': {'type': 'string'}, 'message': {'type': 'string'}}, 'required': ['code', 'message']}
            }
    
    def get_ref(self):
        return "FakeRef"

    def get_responses(self):
        return {'Update an existing pet.putpet': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'Add a new pet to the store.postpet': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'Finds Pets by status.getfindByStatus': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'Finds Pets by tags.getfindByTags': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'Find pet by ID.get{petId}': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'Updates a pet in the store with form data.post{petId}': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'Deletes a pet.delete{petId}': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'Uploads an image.postuploadImage': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'Returns pet inventories by status.getinventory': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'Place an order for a pet.postorder': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'Find purchase order by ID.get{orderId}': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'Delete purchase order by identifier.delete{orderId}': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'Create user.postuser': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'Creates list of users with given input array.postcreateWithList': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'Logs user into the system.getlogin': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'Logs out current logged in user session.getlogout': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'Get user by user name.get{username}': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'Update user resource.put{username}': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'Delete user resource.delete{username}': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}}
        
    def get_functional_processes_descriptions(self):
        return "FakeFunctionalProcessesDescriptions"

    def extract_functional_processes_from_spec(self):
        return "FakeFunctionalProcessesFromSpec"

    def extract_schema_object(self):
        return "FakeSchemaObject"

    def get_crud_operation_per_fp(self):
        return "FakeCrudOperationPerFp"

    def extract_properties_from_schema_object(self):
        return "Fakeproperties"