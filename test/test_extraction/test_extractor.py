import unittest
from test.helpers.ExtractorSpecificationFileTest import ExtractorSpecificationFileTest
import src.extraction.Extractor as extractor
from test.helpers.helpers import Helpers

class Test_Extractor(ExtractorSpecificationFileTest):
    test_path_2 = './test/testdata/swagger_pet_store.yml'
    test_extractor_2 = extractor.Extractor(test_path_2)
    test_path_3 = './test/testdata/anonymise.yml'
    test_extractor_3 = extractor.Extractor(test_path_3)


    def test_get_spec_version(self):       
        self.assertEqual(self.test_extractor_2.get_spec_version(), {'openapi' : "3.0.4"})
        self.assertEqual(self.test_extractor_3.get_spec_version(), {'openapi' : '3.0.1'})

    def test_get_api_name(self):       
        self.assertEqual(self.test_extractor_2.get_api_name(), "Swagger Petstore - OpenAPI 3.0")
        self.assertEqual(self.test_extractor_3.get_api_name(), "API Anonymisee")
           
    def test_get_api_description(self):      
        self.assertEqual(self.test_extractor_2.get_api_description(), "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)")
        self.assertEqual(self.test_extractor_3.get_api_description(), "API Rest Anonymisee")

    def test_get_api_server_url(self):       
        self.assertEqual(sorted(self.test_extractor_2.get_api_server_url()), ["https://petstore3.swagger.io/api/v3"])

    def test_get_api_server_url_when_no_server_url(self):       
        self.assertEqual(self.test_extractor_3.get_api_server_url(), [])

    def test_get_href_from_request_body(self):
        request_body = {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}
        self.assertEqual(self.test_extractor_2.get_href_from_request_body(request_body), '#/components/schemas/User')

    def test_get_summaries(self):
        summaries = {'Add a new pet to the store.', 'Create user.', 'Creates list of users with given input array.', 'Delete purchase order by identifier.', 'Delete user resource.', 'Deletes a pet.', 'Find pet by ID.', 'Find purchase order by ID.', 'Finds Pets by status.', 'Finds Pets by tags.', 'Get user by user name.', 'Logs out current logged in user session.', 'Logs user into the system.', 'Place an order for a pet.', 'Returns pet inventories by status.', 'Update an existing pet.', 'Update user resource.', 'Updates a pet in the store with form data.', 'Uploads an image.'}
        self.assertEqual(sorted(self.test_extractor_2.get_summaries()), sorted(summaries))
        summaries = {"postChangerMotDePasse", "postDemandeChangerMotDePasse", "postDemandeJeton", "postValiderOuvertureDeCompte"}
        self.assertEqual(sorted(self.test_extractor_3.get_summaries()), sorted(summaries))

    def test_get_summaries_when_no_summary(self):
        summaries = {"postValiderOuvertureDeCompte", "postChangerMotDePasse", "postDemandeJeton", "postDemandeChangerMotDePasse"}
        self.assertEqual(sorted(self.test_extractor_3.get_summaries()), sorted(summaries))

    def test_get_summaries_from_http_operation(self):
        http_operation = "/Ouverture/ValiderOuvertureDeCompte"
        http_verb = "post"
        summary = "postValiderOuvertureDeCompte"
        self.assertEqual(self.test_extractor_3.get_summaries_from_http_operation(http_operation, http_verb), summary)

    def test_get_paths(self):
        expected_paths = {
            '/pet': {'put': {'tags': ['pet'], 'summary': 'Update an existing pet.', 'description': 'Update an existing pet by Id.', 'operationId': 'updatePet', 'requestBody': {'description': 'Update an existent pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Add a new pet to the store.', 'description': 'Add a new pet to the store.', 'operationId': 'addPet', 'requestBody': {'description': 'Create a new pet in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Pet'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByStatus': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by status.', 'description': 'Multiple status values can be provided with comma separated strings.', 'operationId': 'findPetsByStatus', 'parameters': [{'name': 'status', 'in': 'query', 'description': 'Status values that need to be considered for filter', 'required': False, 'explode': True, 'schema': {'type': 'string', 'default': 'available', 'enum': ['available', 'pending', 'sold']}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid status value'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/findByTags': {'get': {'tags': ['pet'], 'summary': 'Finds Pets by tags.', 'description': 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.', 'operationId': 'findPetsByTags', 'parameters': [{'name': 'tags', 'in': 'query', 'description': 'Tags to filter by', 'required': False, 'explode': True, 'schema': {'type': 'array', 'items': {'type': 'string'}}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}, 'application/xml': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Pet'}}}}}, '400': {'description': 'Invalid tag value'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}': {'get': {'tags': ['pet'], 'summary': 'Find pet by ID.', 'description': 'Returns a single pet.', 'operationId': 'getPetById', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to return', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'security': [{'api_key': []}, {'petstore_auth': ['write:pets', 'read:pets']}]}, 'post': {'tags': ['pet'], 'summary': 'Updates a pet in the store with form data.', 'description': 'Updates a pet resource based on the form data.', 'operationId': 'updatePetWithForm', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet that needs to be updated', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'name', 'in': 'query', 'description': 'Name of pet that needs to be updated', 'schema': {'type': 'string'}}, {'name': 'status', 'in': 'query', 'description': 'Status of pet that needs to be updated', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Pet'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Pet'}}}}, '400': {'description': 'Invalid input'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}, 'delete': {'tags': ['pet'], 'summary': 'Deletes a pet.', 'description': 'Delete a pet.', 'operationId': 'deletePet', 'parameters': [{'name': 'api_key', 'in': 'header', 'description': '', 'required': False, 'schema': {'type': 'string'}}, {'name': 'petId', 'in': 'path', 'description': 'Pet id to delete', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'Pet deleted'}, '400': {'description': 'Invalid pet value'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/pet/{petId}/uploadImage': {'post': {'tags': ['pet'], 'summary': 'Uploads an image.', 'description': 'Upload image of the pet.', 'operationId': 'uploadFile', 'parameters': [{'name': 'petId', 'in': 'path', 'description': 'ID of pet to update', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}, {'name': 'additionalMetadata', 'in': 'query', 'description': 'Additional Metadata', 'required': False, 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/octet-stream': {'schema': {'type': 'string', 'format': 'binary'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ApiResponse'}}}}, '400': {'description': 'No file uploaded'}, '404': {'description': 'Pet not found'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'security': [{'petstore_auth': ['write:pets', 'read:pets']}]}}, '/store/inventory': {'get': {'tags': ['store'], 'summary': 'Returns pet inventories by status.', 'description': 'Returns a map of status codes to quantities.', 'operationId': 'getInventory', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'additionalProperties': {'type': 'integer', 'format': 'int32'}}}}}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}, 'security': [{'api_key': []}]}}, '/store/order': {'post': {'tags': ['store'], 'summary': 'Place an order for a pet.', 'description': 'Place a new order in the store.', 'operationId': 'placeOrder', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/Order'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid input'}, '422': {'description': 'Validation exception'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}}}, '/store/order/{orderId}': {'get': {'tags': ['store'], 'summary': 'Find purchase order by ID.', 'description': 'For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.', 'operationId': 'getOrderById', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of order that needs to be fetched', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Order'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/Order'}}}}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}}, 'delete': {'tags': ['store'], 'summary': 'Delete purchase order by identifier.', 'description': 'For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors.', 'operationId': 'deleteOrder', 'parameters': [{'name': 'orderId', 'in': 'path', 'description': 'ID of the order that needs to be deleted', 'required': True, 'schema': {'type': 'integer', 'format': 'int64'}}], 'responses': {'200': {'description': 'order deleted'}, '400': {'description': 'Invalid ID supplied'}, '404': {'description': 'Order not found'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}}}, '/user': {'post': {'tags': ['user'], 'summary': 'Create user.', 'description': 'This can only be done by the logged in user.', 'operationId': 'createUser', 'requestBody': {'description': 'Created user object', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}}}, '/user/createWithList': {'post': {'tags': ['user'], 'summary': 'Creates list of users with given input array.', 'description': 'Creates list of users with given input array.', 'operationId': 'createUsersWithListInput', 'requestBody': {'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/User'}}}}}, 'responses': {'200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}}}, '/user/login': {'get': {'tags': ['user'], 'summary': 'Logs user into the system.', 'description': 'Log into the system.', 'operationId': 'loginUser', 'parameters': [{'name': 'username', 'in': 'query', 'description': 'The user name for login', 'required': False, 'schema': {'type': 'string'}}, {'name': 'password', 'in': 'query', 'description': 'The password for login in clear text', 'required': False, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'headers': {'X-Rate-Limit': {'description': 'calls per hour allowed by the user', 'schema': {'type': 'integer', 'format': 'int32'}}, 'X-Expires-After': {'description': 'date in UTC when token expires', 'schema': {'type': 'string', 'format': 'date-time'}}}, 'content': {'application/xml': {'schema': {'type': 'string'}}, 'application/json': {'schema': {'type': 'string'}}}}, '400': {'description': 'Invalid username/password supplied'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}}}, '/user/logout': {'get': {'tags': ['user'], 'summary': 'Logs out current logged in user session.', 'description': 'Log user out of the system.', 'operationId': 'logoutUser', 'parameters': [], 'responses': {'200': {'description': 'successful operation'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}}}, '/user/{username}': {'get': {'tags': ['user'], 'summary': 'Get user by user name.', 'description': 'Get user detail based on username.', 'operationId': 'getUserByName', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be fetched. Use user1 for testing', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}}}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}}, 'put': {'tags': ['user'], 'summary': 'Update user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'updateUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'name that need to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Update an existent user in the store', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/xml': {'schema': {'$ref': '#/components/schemas/User'}}, 'application/x-www-form-urlencoded': {'schema': {'$ref': '#/components/schemas/User'}}}}, 'responses': {'200': {'description': 'successful operation'}, '400': {'description': 'bad request'}, '404': {'description': 'user not found'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}}, 'delete': {'tags': ['user'], 'summary': 'Delete user resource.', 'description': 'This can only be done by the logged in user.', 'operationId': 'deleteUser', 'parameters': [{'name': 'username', 'in': 'path', 'description': 'The name that needs to be deleted', 'required': True, 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'User deleted'}, '400': {'description': 'Invalid username supplied'}, '404': {'description': 'User not found'}, 'default': {'description': 'Unexpected error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Error'}}}}}}}
            }
        self.assertEqual(Helpers.sort_dict_by_value(self.test_extractor_2.get_paths()), Helpers.sort_dict_by_value(expected_paths))

    def test_get_schema(self):
        expected_schema = {
                           'Order': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'petId': {'type': 'integer', 'format': 'int64', 'example': 198772}, 'quantity': {'type': 'integer', 'format': 'int32', 'example': 7}, 'shipDate': {'type': 'string', 'format': 'date-time'}, 'status': {'type': 'string', 'description': 'Order Status', 'example': 'approved', 'enum': ['placed', 'approved', 'delivered']}, 'complete': {'type': 'boolean'}}, 'xml': {'name': 'order'}}, 'Category': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 1}, 'name': {'type': 'string', 'example': 'Dogs'}}, 'xml': {'name': 'category'}}, 'User': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'username': {'type': 'string', 'example': 'theUser'}, 'firstName': {'type': 'string', 'example': 'John'}, 'lastName': {'type': 'string', 'example': 'James'}, 'email': {'type': 'string', 'example': 'john@email.com'}, 'password': {'type': 'string', 'example': '12345'}, 'phone': {'type': 'string', 'example': '12345'}, 'userStatus': {'type': 'integer', 'description': 'User Status', 'format': 'int32', 'example': 1}}, 'xml': {'name': 'user'}}, 'Tag': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}}, 'xml': {'name': 'tag'}}, 'Pet': {'required': ['name', 'photoUrls'], 'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'example': 10}, 'name': {'type': 'string', 'example': 'doggie'}, 'category': {'$ref': '#/components/schemas/Category'}, 'photoUrls': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'type': 'string', 'xml': {'name': 'photoUrl'}}}, 'tags': {'type': 'array', 'xml': {'wrapped': True}, 'items': {'$ref': '#/components/schemas/Tag'}}, 'status': {'type': 'string', 'description': 'pet status in the store', 'enum': ['available', 'pending', 'sold']}}, 'xml': {'name': 'pet'}}, 'ApiResponse': {'type': 'object', 'properties': {'code': {'type': 'integer', 'format': 'int32'}, 'type': {'type': 'string'}, 'message': {'type': 'string'}}, 'xml': {'name': '##default'}}, 'Error': {'type': 'object', 'properties': {'code': {'type': 'string'}, 'message': {'type': 'string'}}, 'required': ['code', 'message']}
                           }
        self.assertEqual(Helpers.sort_dict_by_value(expected_schema), Helpers.sort_dict_by_value(self.test_extractor_2.get_schema()))

    def test_get_responses(self):
        expected_schema_2 = {}

        self.assertEqual(Helpers.sort_dict_by_value(expected_schema_2), Helpers.sort_dict_by_value(self.test_extractor_2.get_responses()))